{"ast":null,"code":"var _jsxFileName = \"/home/tedmund/Documents/fso2020/part5/bloglist-frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport Notification from './components/Notification';\nimport Blog from './components/Blog';\nimport Login from './components/Login';\nimport Logout from './components/Logout';\nimport CreateBlog from './components/CreateBlog';\nimport Togglable from './components/Togglable';\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [isError, setIsError] = useState(false); // Re-rendering blogs since 'populate' only called on first load of page\n\n  useEffect(() => {\n    blogService.getAll().then(blogs => setBlogs(blogs));\n  }, [blogs.length]); // Retrieving existing user information in browser session, if any\n\n  useEffect(() => {\n    const userJSON = window.localStorage.getItem('loggedblogUserJSON');\n\n    if (userJSON) {\n      const user = JSON.parse(userJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n      setMessage(`user ${user.name} has successfully logged in`);\n      resetMessage();\n    }\n  }, []); // Helper function to remove notification after 5 seconds\n\n  const resetMessage = () => {\n    setTimeout(() => {\n      setMessage(null);\n      setIsError(false);\n    }, 5000);\n  };\n\n  const handleLogin = async event => {\n    event.preventDefault();\n\n    try {\n      // Creating HTTP POST request to login page\n      const user = await loginService.create({\n        username,\n        password\n      }); // Registering user information in browser session and blog service\n      // From this point on, only identify by token\n\n      setUser(user);\n      window.localStorage.setItem('loggedblogUserJSON', JSON.stringify(user)); // Notification alerts\n\n      setMessage(`user ${user.name} has successfully logged in`);\n      resetMessage();\n    } catch (exception) {\n      setMessage('invalid username or password');\n      setIsError(true);\n      resetMessage();\n    } // Resetting username and password fields\n\n\n    setUsername('');\n    setPassword('');\n  };\n\n  const handleLogout = async () => {\n    window.localStorage.clear();\n    setUser(null);\n    blogService.setToken(null);\n    setMessage('successfully logged out');\n    resetMessage();\n  };\n\n  const createNewBlog = async newBlog => {\n    const savedBlog = await blogService.create(newBlog);\n    setBlogs(blogs.concat(savedBlog));\n    setMessage(`a new blog, ${savedBlog.title} by ${savedBlog.author} added`);\n    resetMessage();\n  };\n\n  const likeBlog = async (id, newBlog) => {\n    const updatedBlog = await blogService.update(id, newBlog);\n    setBlogs(blogs.map(blog => blog.id !== id ? blog : newBlog));\n    setMessage(`blog ${updatedBlog.title} by ${updatedBlog.author} has been updated`);\n    resetMessage();\n  };\n\n  const deleteBlog = async id => {\n    await blogService.remove(id);\n    const deletedBlog = blogs.find(blog => blog.id === id);\n    setBlogs(blogs.filter(blog => blog.id !== id));\n    setMessage(`the blog ${deletedBlog.title} by ${deletedBlog.author} has been deleted`);\n    resetMessage();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"blogs\"), React.createElement(Notification, {\n    message: message,\n    isError: isError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), user === null ? React.createElement(Togglable, {\n    buttonLabel: \"log in\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(Login, {\n    username: username,\n    setUsername: setUsername,\n    password: password,\n    setPassword: setPassword,\n    handleLogin: handleLogin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  })) : React.createElement(Logout, {\n    name: user.name,\n    logout: handleLogout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"create new\"), React.createElement(Togglable, {\n    buttonLabel: \"create new blog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, React.createElement(CreateBlog, {\n    createNewBlog: createNewBlog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), blogs.sort((first, second) => second.likes - first.likes).map(blog => React.createElement(Blog, {\n    key: blog.id,\n    blog: blog,\n    likeBlog: likeBlog,\n    deleteBlog: deleteBlog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/tedmund/Documents/fso2020/part5/bloglist-frontend/src/App.js"],"names":["React","useState","useEffect","blogService","loginService","Notification","Blog","Login","Logout","CreateBlog","Togglable","App","blogs","setBlogs","username","setUsername","password","setPassword","user","setUser","message","setMessage","isError","setIsError","getAll","then","length","userJSON","window","localStorage","getItem","JSON","parse","setToken","token","name","resetMessage","setTimeout","handleLogin","event","preventDefault","create","setItem","stringify","exception","handleLogout","clear","createNewBlog","newBlog","savedBlog","concat","title","author","likeBlog","id","updatedBlog","update","map","blog","deleteBlog","remove","deletedBlog","find","filter","sort","first","second","likes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport Notification from './components/Notification';\nimport Blog from './components/Blog';\nimport Login from './components/Login';\nimport Logout from './components/Logout';\nimport CreateBlog from './components/CreateBlog';\nimport Togglable from './components/Togglable';\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n\n  const [message, setMessage] = useState(null);\n  const [isError, setIsError] = useState(false);\n\n  // Re-rendering blogs since 'populate' only called on first load of page\n  useEffect(() => {\n    blogService.getAll().then((blogs) => setBlogs(blogs));\n  }, [blogs.length]);\n\n  // Retrieving existing user information in browser session, if any\n  useEffect(() => {\n    const userJSON = window.localStorage.getItem('loggedblogUserJSON');\n    if (userJSON) {\n      const user = JSON.parse(userJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n\n      setMessage(`user ${user.name} has successfully logged in`);\n      resetMessage();\n    }\n  }, []);\n\n  // Helper function to remove notification after 5 seconds\n  const resetMessage = () => {\n    setTimeout(() => {\n      setMessage(null);\n      setIsError(false);\n    }, 5000);\n  };\n\n  const handleLogin = async (event) => {\n    event.preventDefault();\n\n    try {\n      // Creating HTTP POST request to login page\n      const user = await loginService.create({ username, password });\n\n      // Registering user information in browser session and blog service\n      // From this point on, only identify by token\n      setUser(user);\n      window.localStorage.setItem('loggedblogUserJSON', JSON.stringify(user));\n\n      // Notification alerts\n      setMessage(`user ${user.name} has successfully logged in`);\n      resetMessage();\n    } catch (exception) {\n      setMessage('invalid username or password');\n      setIsError(true);\n\n      resetMessage();\n    }\n\n    // Resetting username and password fields\n    setUsername('');\n    setPassword('');\n  };\n\n  const handleLogout = async () => {\n    window.localStorage.clear();\n    setUser(null);\n    blogService.setToken(null);\n\n    setMessage('successfully logged out');\n    resetMessage();\n  };\n\n  const createNewBlog = async (newBlog) => {\n    const savedBlog = await blogService.create(newBlog);\n    setBlogs(blogs.concat(savedBlog));\n    setMessage(`a new blog, ${savedBlog.title} by ${savedBlog.author} added`);\n    resetMessage();\n  };\n\n  const likeBlog = async (id, newBlog) => {\n    const updatedBlog = await blogService.update(id, newBlog);\n    setBlogs(blogs.map((blog) => (blog.id !== id ? blog : newBlog)));\n    setMessage(\n      `blog ${updatedBlog.title} by ${updatedBlog.author} has been updated`\n    );\n\n    resetMessage();\n  };\n\n  const deleteBlog = async (id) => {\n    await blogService.remove(id);\n    const deletedBlog = blogs.find((blog) => blog.id === id);\n    setBlogs(blogs.filter((blog) => blog.id !== id));\n    setMessage(\n      `the blog ${deletedBlog.title} by ${deletedBlog.author} has been deleted`\n    );\n\n    resetMessage();\n  };\n\n  return (\n    <div>\n      <div>\n        <h2>blogs</h2>\n        <Notification message={message} isError={isError} />\n        {user === null ? (\n          <Togglable buttonLabel='log in'>\n            <Login\n              username={username}\n              setUsername={setUsername}\n              password={password}\n              setPassword={setPassword}\n              handleLogin={handleLogin}\n            />\n          </Togglable>\n        ) : (\n          <Logout name={user.name} logout={handleLogout} />\n        )}\n        <h2>create new</h2>\n        <Togglable buttonLabel='create new blog'>\n          <CreateBlog createNewBlog={createNewBlog} />\n        </Togglable>\n        {blogs\n          .sort((first, second) => second.likes - first.likes)\n          .map((blog) => (\n            <Blog\n              key={blog.id}\n              blog={blog}\n              likeBlog={likeBlog}\n              deleteBlog={deleteBlog}\n            />\n          ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}