{"ast":null,"code":"var _jsxFileName = \"/home/tedmund/Documents/fso2020/part5/bloglist-frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport Notification from './components/Notification';\nimport Blog from './components/Blog';\nimport Login from './components/Login';\nimport Logout from './components/Logout';\nimport CreateBlog from './components/CreateBlog';\nimport Togglable from './components/Togglable';\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [user, setUser] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [isError, setIsError] = useState(false); // Re-rendering blogs since 'populate' only called on first load of page\n\n  useEffect(() => {\n    blogService.getAll().then(blogs => setBlogs(blogs));\n  }, [blogs.length]); // Retrieving existing user information in browser session, if any\n\n  useEffect(() => {\n    const userJSON = window.localStorage.getItem('loggedblogUserJSON');\n\n    if (userJSON) {\n      const user = JSON.parse(userJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n      setMessage(`user ${user.name} has successfully logged in`);\n      resetMessage();\n    }\n  }, []); // Helper function to remove notification after 5 seconds\n\n  const resetMessage = () => {\n    setTimeout(() => {\n      setMessage(null);\n      setIsError(false);\n    }, 5000);\n  }; // Handling user login page\n\n\n  const handleLogin = async newUser => {\n    try {\n      // Creating HTTP POST request to login page\n      const user = await loginService.login(newUser); // Registering user information in browser session and blog service\n      // From this point on, server only identify user by token\n\n      setUser(user);\n      window.localStorage.setItem('loggedblogUserJSON', JSON.stringify(user)); // Notification alerts\n\n      setMessage(`user ${user.name} has successfully logged in`);\n      resetMessage();\n    } catch (exception) {\n      setMessage('invalid username or password');\n      setIsError(true);\n      resetMessage();\n    }\n  }; // Handling logout of user\n\n\n  const handleLogout = async () => {\n    window.localStorage.clear();\n    setUser(null);\n    blogService.setToken(null);\n    setMessage('successfully logged out');\n    resetMessage();\n  }; // Handling creation of new blog\n\n\n  const createNewBlog = async newBlog => {\n    const savedBlog = await blogService.create(newBlog);\n    setBlogs(blogs.concat(savedBlog));\n    setMessage(`a new blog, ${savedBlog.title} by ${savedBlog.author} added`);\n    resetMessage();\n  }; // Logic for changing likes of blogs\n\n\n  const likeBlog = async (id, newBlog) => {\n    const updatedBlog = await blogService.update(id, newBlog);\n    setBlogs(blogs.map(blog => blog.id !== id ? blog : newBlog));\n    setMessage(`blog ${updatedBlog.title} by ${updatedBlog.author} has been updated`);\n    resetMessage();\n  }; // Handling deletion of a blog\n\n\n  const deleteBlog = async id => {\n    const confirmation = window.confirm(`Remove the blog ${blogs.find(blog => blog.id === id)}?`);\n\n    if (confirmation) {\n      await blogService.remove(id);\n      const deletedBlog = blogs.find(blog => blog.id === id);\n      setBlogs(blogs.filter(blog => blog.id !== id));\n      setMessage(`the blog ${deletedBlog.title} by ${deletedBlog.author} has been deleted`);\n      resetMessage();\n    }\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, \"blogs\"), React.createElement(Notification, {\n    message: message,\n    isError: isError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }), user === null ? React.createElement(Togglable, {\n    buttonLabel: \"log in\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, React.createElement(Login, {\n    handleLogin: handleLogin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(\"inline\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Logout, {\n    name: user.name,\n    logout: handleLogout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, \"create new\"), React.createElement(Togglable, {\n    buttonLabel: \"create new blog\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, React.createElement(CreateBlog, {\n    createNewBlog: createNewBlog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), blogs.sort((first, second) => second.likes - first.likes).map(blog => React.createElement(Blog, {\n    key: blog.id,\n    blog: blog,\n    likeBlog: likeBlog,\n    deleteBlog: deleteBlog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  })))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/tedmund/Documents/fso2020/part5/bloglist-frontend/src/App.js"],"names":["React","useState","useEffect","blogService","loginService","Notification","Blog","Login","Logout","CreateBlog","Togglable","App","blogs","setBlogs","user","setUser","message","setMessage","isError","setIsError","getAll","then","length","userJSON","window","localStorage","getItem","JSON","parse","setToken","token","name","resetMessage","setTimeout","handleLogin","newUser","login","setItem","stringify","exception","handleLogout","clear","createNewBlog","newBlog","savedBlog","create","concat","title","author","likeBlog","id","updatedBlog","update","map","blog","deleteBlog","confirmation","confirm","find","remove","deletedBlog","filter","sort","first","second","likes"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport Notification from './components/Notification';\nimport Blog from './components/Blog';\nimport Login from './components/Login';\nimport Logout from './components/Logout';\nimport CreateBlog from './components/CreateBlog';\nimport Togglable from './components/Togglable';\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [user, setUser] = useState(null);\n  const [message, setMessage] = useState(null);\n  const [isError, setIsError] = useState(false);\n\n  // Re-rendering blogs since 'populate' only called on first load of page\n  useEffect(() => {\n    blogService.getAll().then((blogs) => setBlogs(blogs));\n  }, [blogs.length]);\n\n  // Retrieving existing user information in browser session, if any\n  useEffect(() => {\n    const userJSON = window.localStorage.getItem('loggedblogUserJSON');\n    if (userJSON) {\n      const user = JSON.parse(userJSON);\n      setUser(user);\n      blogService.setToken(user.token);\n\n      setMessage(`user ${user.name} has successfully logged in`);\n      resetMessage();\n    }\n  }, []);\n\n  // Helper function to remove notification after 5 seconds\n  const resetMessage = () => {\n    setTimeout(() => {\n      setMessage(null);\n      setIsError(false);\n    }, 5000);\n  };\n\n  // Handling user login page\n  const handleLogin = async (newUser) => {\n    try {\n      // Creating HTTP POST request to login page\n      const user = await loginService.login(newUser);\n\n      // Registering user information in browser session and blog service\n      // From this point on, server only identify user by token\n      setUser(user);\n      window.localStorage.setItem('loggedblogUserJSON', JSON.stringify(user));\n\n      // Notification alerts\n      setMessage(`user ${user.name} has successfully logged in`);\n      resetMessage();\n    } catch (exception) {\n      setMessage('invalid username or password');\n      setIsError(true);\n\n      resetMessage();\n    }\n  };\n\n  // Handling logout of user\n  const handleLogout = async () => {\n    window.localStorage.clear();\n    setUser(null);\n    blogService.setToken(null);\n\n    setMessage('successfully logged out');\n    resetMessage();\n  };\n\n  // Handling creation of new blog\n  const createNewBlog = async (newBlog) => {\n    const savedBlog = await blogService.create(newBlog);\n    setBlogs(blogs.concat(savedBlog));\n    setMessage(`a new blog, ${savedBlog.title} by ${savedBlog.author} added`);\n    resetMessage();\n  };\n\n  // Logic for changing likes of blogs\n  const likeBlog = async (id, newBlog) => {\n    const updatedBlog = await blogService.update(id, newBlog);\n    setBlogs(blogs.map((blog) => (blog.id !== id ? blog : newBlog)));\n    setMessage(\n      `blog ${updatedBlog.title} by ${updatedBlog.author} has been updated`\n    );\n\n    resetMessage();\n  };\n\n  // Handling deletion of a blog\n  const deleteBlog = async (id) => {\n    const confirmation = window.confirm(\n      `Remove the blog ${blogs.find((blog) => blog.id === id)}?`\n    );\n    if (confirmation) {\n      await blogService.remove(id);\n      const deletedBlog = blogs.find((blog) => blog.id === id);\n      setBlogs(blogs.filter((blog) => blog.id !== id));\n      setMessage(\n        `the blog ${deletedBlog.title} by ${deletedBlog.author} has been deleted`\n      );\n\n      resetMessage();\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        <h2>blogs</h2>\n        <Notification message={message} isError={isError} />\n        {user === null ? (\n          <Togglable buttonLabel='log in'>\n            <Login handleLogin={handleLogin} />\n          </Togglable>\n        ) : (\n          <div>\n            <inline>\n              <Logout name={user.name} logout={handleLogout} />\n            </inline>\n            <h2>create new</h2>\n            <Togglable buttonLabel='create new blog'>\n              <CreateBlog createNewBlog={createNewBlog} />\n            </Togglable>\n            {blogs\n              .sort((first, second) => second.likes - first.likes)\n              .map((blog) => (\n                <Blog\n                  key={blog.id}\n                  blog={blog}\n                  likeBlog={likeBlog}\n                  deleteBlog={deleteBlog}\n                />\n              ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}