{"ast":null,"code":"var _jsxFileName = \"/home/tedmund/Documents/fso2020/part5/bloglist-frontend/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport Notification from './components/Notification';\nimport Blog from './components/Blog';\nimport Login from './components/Login';\nimport Logout from './components/Logout';\nimport CreateBlog from './components/CreateBlog';\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  const [newBlog, setNewBlog] = useState({\n    title: '',\n    author: '',\n    url: ''\n  });\n  const [message, setMessage] = useState(null);\n  const [isError, setIsError] = useState(false);\n  useEffect(() => {\n    blogService.getAll().then(blogs => setBlogs(blogs));\n  }, []);\n  useEffect(() => {\n    const userJSON = window.localStorage.getItem('loggedblogUserJSON');\n\n    if (user) {\n      const user = JSON.parse(userJSON);\n    }\n  });\n\n  const resetMessage = () => {\n    setTimeout(() => {\n      setMessage(null);\n    }, 5000);\n  };\n\n  const handleLogin = async event => {\n    event.preventDefault();\n\n    try {\n      const user = await loginService.login({\n        username,\n        password\n      });\n      setUser(user);\n      window.localStorage.setItem('loggedblogUserJSON', JSON.stringify(user));\n      blogService.setToken(user.token);\n      setMessage(`user ${user.name} successfully logged in`);\n      resetMessage();\n    } catch (exception) {\n      console.log('invalid credentials');\n      setMessage('wrong username or password');\n      setIsError(true);\n      resetMessage();\n    }\n\n    setUsername('');\n    setPassword('');\n  };\n\n  const handleLogout = () => {\n    // Clearing the local storage on the browser for this user session\n    window.localStorage.clear();\n    setUser(null);\n    blogService.setToken(null);\n    setMessage(`user ${user.name} successfully logged out`);\n    resetMessage();\n  };\n\n  const createNewBlog = async event => {\n    event.preventDefault();\n    const savedBlog = await blogService.create(newBlog);\n    setBlogs(blogs.concat(savedBlog));\n    setMessage(`a new blog, ${savedBlog.title} by ${savedBlog.author} added`);\n    resetMessage();\n    setNewBlog({\n      title: '',\n      author: '',\n      url: ''\n    });\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"blogs\"), React.createElement(Notification, {\n    message: message,\n    isError: isError,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), user === null ? React.createElement(Login, {\n    username: username,\n    setUsername: setUsername,\n    password: password,\n    setPassword: setPassword,\n    handleLogin: handleLogin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }) : React.createElement(Logout, {\n    name: user.name,\n    logout: handleLogout,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }), React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"create new\"), React.createElement(CreateBlog, {\n    newBlog: newBlog,\n    setNewBlog: setNewBlog,\n    createNewBlog: createNewBlog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }), blogs.map(blog => React.createElement(Blog, {\n    key: blog.id,\n    blog: blog,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["/home/tedmund/Documents/fso2020/part5/bloglist-frontend/src/App.js"],"names":["React","useState","useEffect","blogService","loginService","Notification","Blog","Login","Logout","CreateBlog","App","blogs","setBlogs","username","setUsername","password","setPassword","user","setUser","newBlog","setNewBlog","title","author","url","message","setMessage","isError","setIsError","getAll","then","userJSON","window","localStorage","getItem","JSON","parse","resetMessage","setTimeout","handleLogin","event","preventDefault","login","setItem","stringify","setToken","token","name","exception","console","log","handleLogout","clear","createNewBlog","savedBlog","create","concat","map","blog","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport blogService from './services/blogs';\nimport loginService from './services/login';\nimport Notification from './components/Notification';\nimport Blog from './components/Blog';\nimport Login from './components/Login';\nimport Logout from './components/Logout';\nimport CreateBlog from './components/CreateBlog';\n\nconst App = () => {\n  const [blogs, setBlogs] = useState([]);\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [user, setUser] = useState(null);\n  const [newBlog, setNewBlog] = useState({\n    title: '',\n    author: '',\n    url: '',\n  });\n\n  const [message, setMessage] = useState(null);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    blogService.getAll().then((blogs) => setBlogs(blogs));\n  }, []);\n\n  useEffect(() => {\n    const userJSON = window.localStorage.getItem('loggedblogUserJSON');\n    if (user) {\n      const user = JSON.parse(userJSON);\n    }\n  });\n\n  const resetMessage = () => {\n    setTimeout(() => {\n      setMessage(null);\n    }, 5000);\n  };\n\n  const handleLogin = async (event) => {\n    event.preventDefault();\n\n    try {\n      const user = await loginService.login({ username, password });\n\n      setUser(user);\n      window.localStorage.setItem('loggedblogUserJSON', JSON.stringify(user));\n      blogService.setToken(user.token);\n      setMessage(`user ${user.name} successfully logged in`);\n      resetMessage();\n    } catch (exception) {\n      console.log('invalid credentials');\n      setMessage('wrong username or password');\n      setIsError(true);\n\n      resetMessage();\n    }\n    setUsername('');\n    setPassword('');\n  };\n\n  const handleLogout = () => {\n    // Clearing the local storage on the browser for this user session\n    window.localStorage.clear();\n    setUser(null);\n    blogService.setToken(null);\n    setMessage(`user ${user.name} successfully logged out`);\n    resetMessage();\n  };\n\n  const createNewBlog = async (event) => {\n    event.preventDefault();\n\n    const savedBlog = await blogService.create(newBlog);\n    setBlogs(blogs.concat(savedBlog));\n    setMessage(`a new blog, ${savedBlog.title} by ${savedBlog.author} added`);\n    resetMessage();\n\n    setNewBlog({\n      title: '',\n      author: '',\n      url: '',\n    });\n  };\n\n  return (\n    <div>\n      <div>\n        <h2>blogs</h2>\n        <Notification message={message} isError={isError} />\n        {user === null ? (\n          <Login\n            username={username}\n            setUsername={setUsername}\n            password={password}\n            setPassword={setPassword}\n            handleLogin={handleLogin}\n          />\n        ) : (\n          <Logout name={user.name} logout={handleLogout} />\n        )}\n        <h2>create new</h2>\n        <CreateBlog\n          newBlog={newBlog}\n          setNewBlog={setNewBlog}\n          createNewBlog={createNewBlog}\n        />\n        {blogs.map((blog) => (\n          <Blog key={blog.id} blog={blog} />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}